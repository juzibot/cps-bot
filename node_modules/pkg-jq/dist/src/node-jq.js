"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_jq_1 = require("node-jq");
function jqFile(filter, file, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let result = yield node_jq_1.run(filter, file, options); // FIXME
        // FIXME: wait for https://github.com/sanack/node-jq/pull/173 to be published
        if (options && options.raw) {
            if (result[0] === '"') {
                result = result.substr(1, result.length - 2);
            }
        }
        return result;
    });
}
exports.jqFile = jqFile;
function jqString(filter, text) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield node_jq_1.run(filter, text, { input: 'string' });
        return result; // FIXME
    });
}
exports.jqString = jqString;
function jqJson(filter, json) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield node_jq_1.run(filter, json, { input: 'json' });
        return result; // FIXME
    });
}
exports.jqJson = jqJson;
//# sourceMappingURL=node-jq.js.map