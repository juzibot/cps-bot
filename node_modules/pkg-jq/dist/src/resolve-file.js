"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const pkg_up_1 = __importDefault(require("pkg-up"));
function resolveFile(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const stat = yield util_1.default.promisify(fs_1.default.lstat)(path);
        let resolvedFile;
        if (stat.isFile()) {
            if (path.match(/\.json$/i)) {
                resolvedFile = path;
            }
            else {
                throw new Error(`${path} is not a JSON file!`);
            }
        }
        else if (stat.isDirectory()) {
            const pkgFile = yield pkg_up_1.default({ cwd: path });
            if (pkgFile === null) {
                throw new Error(`${path} or above directory does not include any package.json file!`);
            }
            resolvedFile = pkgFile;
        }
        else {
            throw new Error(`${path} is neither file nor directory!`);
        }
        return resolvedFile;
    });
}
exports.resolveFile = resolveFile;
//# sourceMappingURL=resolve-file.js.map