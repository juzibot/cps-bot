#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const path_1 = __importDefault(require("path"));
const node_jq_1 = require("./node-jq");
tstest_1.default('jqFile query boolean', (t) => __awaiter(this, void 0, void 0, function* () {
    const JSON_FILE = path_1.default.join(__dirname, '../tests/fixtures/test.json');
    const FILTER = '.test';
    const EXPECTED_OUTPUT = 'true';
    const output = yield node_jq_1.jqFile(FILTER, JSON_FILE);
    t.equal(output, EXPECTED_OUTPUT, 'should filter the file by jqFile');
}));
tstest_1.default('jqFile query string with options = { raw: true }', (t) => __awaiter(this, void 0, void 0, function* () {
    const JSON_FILE = path_1.default.join(__dirname, '../tests/fixtures/test.json');
    const FILTER = '.version';
    const EXPECTED_OUTPUT = '1.0.0';
    const output = yield node_jq_1.jqFile(FILTER, JSON_FILE, { raw: true });
    t.equal(output, EXPECTED_OUTPUT, 'should filter the file by jqFile');
}));
tstest_1.default('jqFile query string', (t) => __awaiter(this, void 0, void 0, function* () {
    const JSON_FILE = path_1.default.join(__dirname, '../tests/fixtures/test.json');
    const FILTER = '.version';
    const EXPECTED_OUTPUT = '"1.0.0"';
    const output = yield node_jq_1.jqFile(FILTER, JSON_FILE);
    t.equal(output, EXPECTED_OUTPUT, 'should filter the file by jqFile');
}));
tstest_1.default('jqJson', (t) => __awaiter(this, void 0, void 0, function* () {
    const JSON_OBJ = {
        json: 42,
    };
    const FILTER = '.json';
    const EXPECTED_OUTPUT = '42';
    const output = yield node_jq_1.jqJson(FILTER, JSON_OBJ);
    t.equal(output, EXPECTED_OUTPUT, 'should filter the file by jqJson');
}));
tstest_1.default('jqString', (t) => __awaiter(this, void 0, void 0, function* () {
    const JSON_TEXT = '{ "json": 42 }';
    const FILTER = '.json';
    const EXPECTED_OUTPUT = '42';
    const output = yield node_jq_1.jqString(FILTER, JSON_TEXT);
    t.equal(output, EXPECTED_OUTPUT, 'should filter the file by jqString');
}));
//# sourceMappingURL=node-jq.spec.js.map