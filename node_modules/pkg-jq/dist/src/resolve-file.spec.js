#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const path_1 = __importDefault(require("path"));
const resolve_file_1 = require("./resolve-file");
tstest_1.default('non-exist path', (t) => __awaiter(this, void 0, void 0, function* () {
    const PATH = '/fdasfadsfasa/b/c';
    try {
        yield resolve_file_1.resolveFile(PATH);
        t.fail('should not run to here');
    }
    catch (e) {
        t.pass('should throw when path not exist');
    }
}));
tstest_1.default('non-exist file', (t) => __awaiter(this, void 0, void 0, function* () {
    const PATH = '/afdsafdasfasa/b/c/non-exist.json';
    try {
        yield resolve_file_1.resolveFile(PATH);
        t.fail('should not run to here');
    }
    catch (e) {
        t.pass('should throw whenfile not exist');
    }
}));
tstest_1.default('exist json file', (t) => __awaiter(this, void 0, void 0, function* () {
    const PATH = path_1.default.join(__dirname, '../tests/fixtures/test.json');
    const EXPECTED_FILE = PATH;
    const file = yield resolve_file_1.resolveFile(PATH);
    t.equal(file, EXPECTED_FILE, 'should resolve to the json file as input');
}));
tstest_1.default('exist path', (t) => __awaiter(this, void 0, void 0, function* () {
    const PATH = path_1.default.join(__dirname, '../tests/fixtures/');
    const EXPECTED_FILE = path_1.default.join(PATH, 'package.json');
    const file = yield resolve_file_1.resolveFile(PATH);
    t.equal(file, EXPECTED_FILE, 'should resolve to the package.json');
}));
//# sourceMappingURL=resolve-file.spec.js.map