#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const argparse_1 = require("argparse");
const update_notifier_1 = __importDefault(require("update-notifier"));
const pkg_up_1 = __importDefault(require("pkg-up"));
const node_jq_1 = require("../src/node-jq");
const resolve_file_1 = require("../src/resolve-file");
const save_file_1 = require("../src/save-file");
const src_1 = require("../src/");
function checkUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const pkgFile = yield pkg_up_1.default({ cwd: __dirname });
        if (!pkgFile) {
            throw new Error('package.json not found!');
        }
        const pkg = require(pkgFile);
        const updateCheckInterval = 1000 * 60 * 60 * 24 * 7; // 1 week
        const notifier = update_notifier_1.default({
            pkg,
            updateCheckInterval,
        });
        notifier.notify();
    });
}
function main(args) {
    return __awaiter(this, void 0, void 0, function* () {
        checkUpdate().catch(console.info);
        const file = yield resolve_file_1.resolveFile(args.path);
        const options = {};
        if (args.raw) {
            options['raw'] = true;
        }
        let result = yield node_jq_1.jqFile(args.filter, file, options);
        if (args.inplace) {
            yield save_file_1.saveFile(file, result);
        }
        else {
            console.info(result);
        }
        return 0;
    });
}
function parseArguments() {
    const parser = new argparse_1.ArgumentParser({
        addHelp: true,
        description: 'Node.js Package jq Utility',
        epilog: `Exmaple: pkg-jq -i '.publishConfig.tag="next"'`,
        prog: 'pkg-jq',
        version: src_1.VERSION,
    });
    parser.addArgument(['filter'], {
        help: `jq filter.`,
    });
    parser.addArgument(['path'], {
        help: 'npm project subdir, or json file. default: $PWD.',
        nargs: '?',
        defaultValue: process.cwd(),
    });
    parser.addArgument(['-i', '--in-place'], {
        help: 'edit files in place.',
        action: 'storeConst',
        constant: true,
        defaultValue: false,
        dest: 'inplace',
    });
    parser.addArgument(['-r', '--raw'], {
        help: 'output raw strings, not JSON texts.',
        action: 'storeConst',
        constant: true,
        defaultValue: false,
        dest: 'raw',
    });
    return parser.parseArgs();
}
process.on('warning', (warning) => {
    console.info(warning.name); // Print the warning name
    console.info(warning.message); // Print the warning message
    console.info(warning.stack); // Print the stack trace
});
main(parseArguments())
    .then(process.exit)
    .catch(e => {
    console.info(e);
    process.exit(1);
});
//# sourceMappingURL=pkg-jq.js.map