"use strict";
/// <reference path="./typings.d.ts" />
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const grpc_1 = __importDefault(require("grpc"));
const wechaty_puppet_1 = require("wechaty-puppet");
const file_box_1 = require("file-box");
const grpc_2 = require("@chatie/grpc");
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
const config_1 = require("../config");
class PuppetHostieGrpc extends wechaty_puppet_1.Puppet {
    constructor(options = {}) {
        super(options);
        this.options = options;
        options.endpoint = options.endpoint || config_1.WECHATY_PUPPET_HOSTIE_ENDPOINT || '0.0.0.0:8788';
        options.token = options.token || config_1.WECHATY_PUPPET_HOSTIE_TOKEN;
        if (!options.token) {
            throw new Error('wechaty-puppet-hostie: token not found. See: <https://github.com/wechaty/wechaty-puppet-hostie#1-wechaty_puppet_hostie_token>');
        }
    }
    startGrpcClient() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', `startGrpcClient()`);
            if (this.grpcClient) {
                throw new Error('puppetClient had already inited');
            }
            const endpoint = this.options.endpoint;
            if (!endpoint) {
                throw new Error('no endpoint');
            }
            this.grpcClient = new grpc_2.PuppetClient(endpoint, // 'localhost:50051',
            grpc_1.default.credentials.createInsecure());
            yield util_1.default.promisify(this.grpcClient.start
                .bind(this.grpcClient))(new grpc_2.StartRequest());
        });
    }
    stopGrpcClient() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', `stopGrpcClient()`);
            if (!this.grpcClient) {
                throw new Error('puppetClient had not inited');
            }
            yield util_1.default.promisify(this.grpcClient.stop
                .bind(this.grpcClient))(new grpc_2.StopRequest());
            this.grpcClient.close();
            this.grpcClient = undefined;
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', `start()`);
            if (this.state.on()) {
                config_1.log.warn('PuppetHostieGrpc', 'start() is called on a ON puppet. await ready(on) and return.');
                yield this.state.ready('on');
                return;
            }
            this.state.on('pending');
            try {
                yield this.startGrpcClient();
                if (!this.grpcClient) {
                    throw new Error('no grpc client');
                }
                this.startEvent();
                this.state.on(true);
            }
            catch (e) {
                config_1.log.error('PuppetHostieGrpc', 'start() rejection: %s', e && e.message);
                this.state.off(true);
                throw e;
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'stop()');
            if (this.state.off()) {
                config_1.log.warn('PuppetHostieGrpc', 'stop() is called on a OFF puppet. await ready(off) and return.');
                yield this.state.ready('off');
                return;
            }
            this.state.off('pending');
            try {
                yield this.stopGrpcClient();
                this.stopEvent();
            }
            catch (e) {
                config_1.log.warn('PuppetHostieGrpc', 'stop() rejection: %s', e && e.message);
                throw e;
            }
            finally {
                this.state.off(true);
            }
        });
    }
    startEvent() {
        config_1.log.verbose('PuppetHostieGrpc', 'startEvent()');
        if (this.eventStream) {
            throw new Error('event stream exists');
        }
        this.eventStream = this.grpcClient.event(new grpc_2.EventRequest());
        this.eventStream
            .on('data', (chunk) => {
            console.info('payload:', chunk.getPayload());
        })
            .on('end', () => {
            console.info('eventStream.on(end)');
        });
    }
    stopEvent() {
        config_1.log.verbose('PuppetHostieGrpc', 'stopEvent()');
        if (!this.eventStream) {
            throw new Error('no event stream');
        }
        this.eventStream.cancel();
        this.eventStream.destroy();
        this.eventStream = undefined;
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'logout()');
            if (!this.id) {
                throw new Error('logout before login?');
            }
            try {
                yield util_1.default.promisify(this.grpcClient.logout
                    .bind(this.grpcClient))(new grpc_2.LogoutRequest());
            }
            catch (e) {
                config_1.log.error('PuppetHostieGrpc', 'logout() rejection: %s', e && e.message);
                throw e;
            }
            finally {
                this.emit('logout', this.id); // becore we will throw above by logonoff() when this.user===undefined
                this.id = undefined;
            }
        });
    }
    ding(data) {
        config_1.log.silly('PuppetHostieGrpc', 'ding(%s)', data || '');
        this.grpcClient.logout(new grpc_2.LogoutRequest(), (error, _response) => {
            if (error) {
                config_1.log.error('PuppetHostieGrpc', 'ding() rejection: %s', error);
            }
        });
    }
    unref() {
        config_1.log.verbose('PuppetHostieGrpc', 'unref()');
        super.unref();
    }
    contactAlias(contactId, alias) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactAlias(%s, %s)', contactId, alias);
            /**
             * Get alias
             */
            if (typeof alias === 'undefined') {
                const request = new grpc_2.ContactAliasRequest();
                request.setId(contactId);
                const response = yield util_1.default.promisify(this.grpcClient.contactAlias)(request);
                const aliasWrapper = response.getAlias();
                if (!aliasWrapper) {
                    throw new Error('can not get aliasWrapper');
                }
                return aliasWrapper.getValue();
            }
            /**
             * Set alias
             */
            const aliasWrapper = new wrappers_pb_1.StringValue();
            aliasWrapper.setValue(alias || ''); // null -> '', in server, we treat '' as null
            const request = new grpc_2.ContactAliasRequest();
            request.setId(contactId);
            request.setAlias(aliasWrapper);
            yield util_1.default.promisify(this.grpcClient.contactAlias)(request);
        });
    }
    contactList() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactList()');
            const response = yield util_1.default.promisify(this.grpcClient.contactList)(new grpc_2.ContactListRequest());
            return response.getIdsList();
        });
    }
    contactQRCode(contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (contactId !== this.selfId()) {
                throw new Error('can not set avatar for others');
            }
            const response = yield util_1.default.promisify(this.grpcClient.contactSelfQRCode)(new grpc_2.ContactSelfQRCodeRequest());
            return response.getQrcode();
        });
    }
    contactAvatar(contactId, fileBox) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactAvatar(%s)', contactId);
            /**
             * 1. set
             */
            if (fileBox) {
                const fileboxWrapper = new wrappers_pb_1.StringValue();
                fileboxWrapper.setValue(JSON.stringify(fileBox));
                const request = new grpc_2.ContactAvatarRequest();
                request.setId(contactId);
                request.setFilebox(fileboxWrapper);
                yield util_1.default.promisify(this.grpcClient.contactSelfQRCode)(request);
                return;
            }
            /**
             * 2. get
             */
            const request = new grpc_2.ContactAvatarRequest();
            request.setId(contactId);
            const response = yield util_1.default.promisify(this.grpcClient.contactSelfQRCode)(request);
            const qrcode = response.getQrcode();
            return file_box_1.FileBox.fromQRCode(qrcode);
        });
    }
    contactRawPayload(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactRawPayload(%s)', id);
            const request = new grpc_2.ContactPayloadRequest();
            request.setId(id);
            const response = yield util_1.default.promisify(this.grpcClient.contactPayload)(request);
            const payload = {
                address: response.getAddress(),
                alias: response.getAlias(),
                avatar: response.getAvatar(),
                city: response.getCity(),
                friend: response.getFriend(),
                gender: response.getGender(),
                id: response.getId(),
                name: response.getName(),
                province: response.getProvince(),
                signature: response.getSignature(),
                star: response.getStar(),
                type: response.getType(),
                weixin: response.getWeixin(),
            };
            return payload;
        });
    }
    contactRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'contactRawPayloadParser(%s)', payload);
            // passthrough
            return payload;
        });
    }
    contactSelfName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactSelfName(%s)', name);
            const request = new grpc_2.ContactSelfNameRequest();
            request.setName(name);
            yield util_1.default.promisify(this.grpcClient.contactSelfName)(request);
        });
    }
    contactSelfQRCode() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactSelfQRCode()');
            const response = yield util_1.default.promisify(this.grpcClient.contactSelfQRCode)(new grpc_2.ContactSelfQRCodeRequest());
            return response.getQrcode();
        });
    }
    contactSelfSignature(signature) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'contactSelfSignature(%s)', signature);
            const request = new grpc_2.ContactSelfSignatureRequest();
            request.setSignature(signature);
            yield util_1.default.promisify(this.grpcClient.contactSelfSignature)(request);
        });
    }
    /**
     *
     * Message
     *
     */
    messageMiniProgram(messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageMiniProgram(%s)', messageId);
            const request = new grpc_2.MessageMiniProgramRequest();
            request.setId(messageId);
            const response = yield util_1.default.promisify(this.grpcClient.messageMiniProgram)(request);
            const jsonText = response.getMiniProgram();
            const payload = JSON.parse(jsonText);
            return payload;
        });
    }
    messageContact(messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageContact(%s)', messageId);
            const request = new grpc_2.MessageContactRequest();
            request.setId(messageId);
            const response = yield util_1.default.promisify(this.grpcClient.messageContact)(request);
            const contactId = response.getId();
            return contactId;
        });
    }
    messageSendMiniProgram(conversationId, miniProgramPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageSendMiniProgram(%s)', conversationId, JSON.stringify(miniProgramPayload));
            const request = new grpc_2.MessageSendMiniProgramRequest();
            request.setConversationId(conversationId);
            request.setMiniProgram(JSON.stringify(miniProgramPayload));
            const response = yield util_1.default.promisify(this.grpcClient.messageSendMiniProgram)(request);
            const messageIdWrapper = response.getId();
            if (messageIdWrapper) {
                return messageIdWrapper.getValue();
            }
        });
    }
    messageRecall(messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageRecall(%s)', messageId);
            const request = new grpc_2.MessageRecallRequest();
            request.setId(messageId);
            const response = yield util_1.default.promisify(this.grpcClient.messageRecall)(request);
            return response.getSuccess();
        });
    }
    messageFile(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageFile(%s)', id);
            const request = new grpc_2.MessageFileRequest();
            request.setId(id);
            const response = yield util_1.default.promisify(this.grpcClient.messageFile)(request);
            const jsonText = response.getFilebox();
            return file_box_1.FileBox.fromJSON(jsonText);
        });
    }
    messageRawPayload(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageRawPayload(%s)', id);
            const request = new grpc_2.MessagePayloadRequest();
            request.setId(id);
            const response = yield util_1.default.promisify(this.grpcClient.messagePayload)(request);
            const payload = {
                filename: response.getFilename(),
                fromId: response.getFromId(),
                id: response.getId(),
                mentionIdList: response.getMentionIdsList(),
                roomId: response.getRoomId(),
                text: response.getText(),
                timestamp: response.getTimestamp(),
                toId: response.getToId(),
                type: response.getType(),
            };
            return payload;
        });
    }
    messageRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'messagePayload(%s)', payload);
            // passthrough
            return payload;
        });
    }
    messageSendText(conversationId, text) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageSend(%s, %s)', conversationId, text);
            const request = new grpc_2.MessageSendTextRequest();
            request.setConversationId(conversationId);
            request.setText(text);
            const response = yield util_1.default.promisify(this.grpcClient.messageSendText)(request);
            const messageIdWrapper = response.getId();
            if (messageIdWrapper) {
                return messageIdWrapper.getValue();
            }
        });
    }
    messageSendFile(conversationId, file) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageSend(%s, %s)', conversationId, file);
            const request = new grpc_2.MessageSendFileRequest();
            request.setConversationId(conversationId);
            request.setFilebox(JSON.stringify(file));
            const response = yield util_1.default.promisify(this.grpcClient.messageSendFile)(request);
            const messageIdWrapper = response.getId();
            if (messageIdWrapper) {
                return messageIdWrapper.getValue();
            }
        });
    }
    messageSendContact(conversationId, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageSend("%s", %s)', conversationId, contactId);
            const request = new grpc_2.MessageSendContactRequest();
            request.setConversationId(conversationId);
            request.setContactId(contactId);
            const response = yield util_1.default.promisify(this.grpcClient.messageSendContact)(request);
            const messageIdWrapper = response.getId();
            if (messageIdWrapper) {
                return messageIdWrapper.getValue();
            }
        });
    }
    messageSendUrl(conversationId, urlLinkPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageSendUrl("%s", %s)', conversationId, JSON.stringify(urlLinkPayload));
            const request = new grpc_2.MessageSendUrlRequest();
            request.setConversationId(conversationId);
            request.setUrlLink(JSON.stringify(urlLinkPayload));
            const response = yield util_1.default.promisify(this.grpcClient.messageSendUrl)(request);
            const messageIdWrapper = response.getId();
            if (messageIdWrapper) {
                return messageIdWrapper.getValue();
            }
        });
    }
    messageUrl(messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'messageUrl(%s)', messageId);
            const request = new grpc_2.MessageUrlRequest();
            request.setId(messageId);
            const response = yield util_1.default.promisify(this.grpcClient.messageUrl)(request);
            const jsonText = response.getUrlLink();
            const payload = JSON.parse(jsonText);
            return payload;
        });
    }
    /**
     *
     * Room
     *
     */
    roomRawPayload(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomRawPayload(%s)', id);
            const request = new grpc_2.RoomPayloadRequest();
            request.setId(id);
            const response = yield util_1.default.promisify(this.grpcClient.roomPayload)(request);
            const payload = {
                adminIdList: response.getAdminIdsList(),
                avatar: response.getAvatar(),
                id: response.getId(),
                memberIdList: response.getMemberIdsList(),
                ownerId: response.getOwnerId(),
                topic: response.getTopic(),
            };
            return payload;
        });
    }
    roomRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'roomRawPayloadParser(%s)', payload);
            // passthrough
            return payload;
        });
    }
    roomList() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomList()');
            const response = yield util_1.default.promisify(this.grpcClient.roomList)(new grpc_2.RoomListRequest());
            return response.getIdsList();
        });
    }
    roomDel(roomId, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomDel(%s, %s)', roomId, contactId);
            const request = new grpc_2.RoomDelRequest();
            request.setId(roomId);
            request.setContactId(contactId);
            yield util_1.default.promisify(this.grpcClient.roomDel)(request);
        });
    }
    roomAvatar(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomAvatar(%s)', roomId);
            const request = new grpc_2.RoomAvatarRequest();
            request.setId(roomId);
            const response = yield util_1.default.promisify(this.grpcClient.roomAvatar)(request);
            const jsonText = response.getFilebox();
            return file_box_1.FileBox.fromJSON(jsonText);
        });
    }
    roomAdd(roomId, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomAdd(%s, %s)', roomId, contactId);
            const request = new grpc_2.RoomAddRequest();
            request.setId(roomId);
            request.setContactId(contactId);
            yield util_1.default.promisify(this.grpcClient.roomAdd)(request);
        });
    }
    roomTopic(roomId, topic) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomTopic(%s, %s)', roomId, topic);
            /**
             * Get
             */
            if (typeof topic === 'undefined') {
                const request = new grpc_2.RoomTopicRequest();
                request.setId(roomId);
                const response = yield util_1.default.promisify(this.grpcClient.roomTopic)(request);
                const topicWrapper = response.getTopic();
                if (topicWrapper) {
                    return topicWrapper.getValue();
                }
                return '';
            }
            /**
             * Set
             */
            const topicWrapper = new wrappers_pb_1.StringValue();
            topicWrapper.setValue(topic);
            const request = new grpc_2.RoomTopicRequest();
            request.setId(roomId);
            request.setTopic(topicWrapper);
            yield util_1.default.promisify(this.grpcClient.roomTopic)(request);
        });
    }
    roomCreate(contactIdList, topic) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomCreate(%s, %s)', contactIdList, topic);
            const request = new grpc_2.RoomCreateRequest();
            request.setContactIdsList(contactIdList);
            request.setTopic(topic);
            const response = yield util_1.default.promisify(this.grpcClient.roomCreate)(request);
            return response.getId();
        });
    }
    roomQuit(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomQuit(%s)', roomId);
            const request = new grpc_2.RoomQuitRequest();
            request.setId(roomId);
            yield util_1.default.promisify(this.grpcClient.roomQuit)(request);
        });
    }
    roomQRCode(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomQRCode(%s)', roomId);
            const request = new grpc_2.RoomQRCodeRequest();
            request.setId(roomId);
            const response = yield util_1.default.promisify(this.grpcClient.roomQRCode)(request);
            return response.getQrcode();
        });
    }
    roomMemberList(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roommemberList(%s)', roomId);
            const request = new grpc_2.RoomMemberListRequest();
            request.setId(roomId);
            const response = yield util_1.default.promisify(this.grpcClient.roomMemberList)(request);
            return response.getMemberIdsList();
        });
    }
    roomMemberRawPayload(roomId, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomMemberRawPayload(%s, %s)', roomId, contactId);
            const request = new grpc_2.RoomMemberPayloadRequest();
            request.setId(roomId);
            const response = yield util_1.default.promisify(this.grpcClient.roomMemberPayload)(request);
            const payload = {
                avatar: response.getAvatar(),
                id: response.getId(),
                inviterId: response.getInviterId(),
                name: response.getName(),
                roomAlias: response.getRoomAlias(),
            };
            return payload;
        });
    }
    roomMemberRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'roomMemberRawPayloadParser(%s)', payload);
            // passthrough
            return payload;
        });
    }
    roomAnnounce(roomId, text) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomAnnounce(%s%s)', roomId, typeof text === 'undefined'
                ? ''
                : `, ${text}`);
            /**
             * Set
             */
            if (text) {
                const textWrapper = new wrappers_pb_1.StringValue();
                textWrapper.setValue(text);
                const request = new grpc_2.RoomAnnounceRequest();
                request.setId(roomId);
                request.setText(textWrapper);
                yield util_1.default.promisify(this.grpcClient.roomAnnounce)(request);
                return;
            }
            /**
             * Get
             */
            const request = new grpc_2.RoomAnnounceRequest();
            request.setId(roomId);
            const response = yield util_1.default.promisify(this.grpcClient.roomAnnounce)(request);
            const textWrapper = response.getText();
            if (textWrapper) {
                return textWrapper.getValue();
            }
            return '';
        });
    }
    roomInvitationAccept(roomInvitationId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomInvitationAccept(%s)', roomInvitationId);
            const request = new grpc_2.RoomInvitationAcceptRequest();
            request.setId(roomInvitationId);
            yield util_1.default.promisify(this.grpcClient.roomInvitationAccept)(request);
        });
    }
    roomInvitationRawPayload(roomInvitationId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'roomInvitationRawPayload(%s)', roomInvitationId);
            const request = new grpc_2.RoomInvitationPayloadRequest();
            request.setId(roomInvitationId);
            const response = yield util_1.default.promisify(this.grpcClient.roomInvitationPayload)(request);
            const payload = {
                avatar: response.getAvatar(),
                id: response.getId(),
                invitation: response.getInvitation(),
                inviterId: response.getInviterId(),
                memberCount: response.getMemberCount(),
                memberIdList: response.getMemberIdsList(),
                timestamp: response.getTimestamp(),
                topic: response.getTopic(),
            };
            return payload;
        });
    }
    roomInvitationRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'roomInvitationRawPayloadParser(%s)', JSON.stringify(payload));
            // passthrough
            return payload;
        });
    }
    /**
     *
     * Friendship
     *
     */
    friendshipSearchPhone(phone) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'friendshipSearchPhone(%s)', phone);
            const request = new grpc_2.FriendshipSearchPhoneRequest();
            request.setPhone(phone);
            const response = yield util_1.default.promisify(this.grpcClient.friendshipSearchPhone)(request);
            const contactIdWrapper = response.getContactId();
            if (contactIdWrapper) {
                return contactIdWrapper.getValue();
            }
            return null;
        });
    }
    friendshipSearchWeixin(weixin) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'friendshipSearchWeixin(%s)', weixin);
            const request = new grpc_2.FriendshipSearchWeixinRequest();
            request.setWeixin(weixin);
            const response = yield util_1.default.promisify(this.grpcClient.friendshipSearchWeixin)(request);
            const contactIdWrapper = response.getContactId();
            if (contactIdWrapper) {
                return contactIdWrapper.getValue();
            }
            return null;
        });
    }
    friendshipRawPayload(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'friendshipRawPayload(%s)', id);
            const request = new grpc_2.FriendshipPayloadRequest();
            request.setId(id);
            const response = yield util_1.default.promisify(this.grpcClient.friendshipPayload)(request);
            const payload = {
                scene: response.getScene(),
                stranger: response.getStranger(),
                ticket: response.getTicket(),
                type: response.getType(),
            }; // FIXME: Huan(202002)
            return payload;
        });
    }
    friendshipRawPayloadParser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.silly('PuppetHostieGrpc', 'friendshipRawPayloadParser(%s)', JSON.stringify(payload));
            return payload;
        });
    }
    friendshipAdd(contactId, hello) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'friendshipAdd(%s, %s)', contactId, hello);
            const request = new grpc_2.FriendshipAddRequest();
            request.setContactId(contactId);
            request.setHello(hello);
            yield util_1.default.promisify(this.grpcClient.friendshipAdd)(request);
        });
    }
    friendshipAccept(friendshipId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'friendshipAccept(%s)', friendshipId);
            const request = new grpc_2.FriendshipAcceptRequest();
            request.setId(friendshipId);
            yield util_1.default.promisify(this.grpcClient.frendshipAccept)(request);
        });
    }
    /**
     *
     * Tag
     *
     */
    // add a tag for a Contact. Create it first if it not exist.
    tagContactAdd(id, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'tagContactAdd(%s, %s)', id, contactId);
            const request = new grpc_2.TagContactAddRequest();
            request.setId(id);
            request.setContactId(contactId);
            yield util_1.default.promisify(this.grpcClient.tagContactAdd)(request);
        });
    }
    // remove a tag from the Contact
    tagContactRemove(id, contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'tagContactRemove(%s, %s)', id, contactId);
            const request = new grpc_2.TagContactRemoveRequest();
            request.setId(id);
            request.setContactId(contactId);
            yield util_1.default.promisify(this.grpcClient.tagContactRemove)(request);
        });
    }
    // delete a tag from Wechat
    tagContactDelete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'tagContactDelete(%s)', id);
            const request = new grpc_2.TagContactDeleteRequest();
            request.setId(id);
            yield util_1.default.promisify(this.grpcClient.tagContactDelete)(request);
        });
    }
    // get tags from a specific Contact
    tagContactList(contactId) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('PuppetHostieGrpc', 'tagContactList(%s)', contactId);
            const request = new grpc_2.TagContactListRequest();
            if (typeof contactId !== 'undefined') {
                const contactIdWrapper = new wrappers_pb_1.StringValue();
                contactIdWrapper.setValue(contactId);
                request.setContactId(contactIdWrapper);
            }
            const response = yield util_1.default.promisify(this.grpcClient.tagContactList)(request);
            return response.getIdsList();
        });
    }
}
exports.PuppetHostieGrpc = PuppetHostieGrpc;
PuppetHostieGrpc.VERSION = config_1.VERSION;
exports.default = PuppetHostieGrpc;
//# sourceMappingURL=puppet-client.js.map