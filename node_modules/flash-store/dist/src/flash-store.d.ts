import { AsyncMap } from './async-map';
export interface IteratorOptions {
    gt?: any;
    gte?: any;
    lt?: any;
    lte?: any;
    reverse?: boolean;
    limit?: number;
    prefix?: any;
}
export declare class FlashStore<K = string, V = any> implements AsyncMap<K, V> {
    workdir?: string | undefined;
    private levelDb;
    private medeaKeyDir;
    private lockFd;
    /**
     * FlashStore is a Key-Value database tool and makes using leveldb more easy for Node.js
     *
     * Creates an instance of FlashStore.
     * @param {string} [workdir=path.join(appRoot, 'flash-store.workdir')]
     * @example
     * import { FlashStore } from 'flash-store'
     * const flashStore = new FlashStore('flashstore.workdir')
     */
    constructor(workdir?: string | undefined);
    version(): string;
    /**
     * Set data in database
     *
     * @param {K} key
     * @param {V} value
     * @returns {Promise<void>}
     * @example
     * await flashStore.set(1, 1)
     */
    set(key: K, value: V): Promise<void>;
    /**
     * Get value from database by key
     *
     * @param {K} key
     * @returns {(Promise<V | null>)}
     * @example
     * console.log(await flashStore.get(1))
     */
    get(key: K): Promise<V | undefined>;
    /**
     * Del data by key
     *
     * @param {K} key
     * @returns {Promise<void>}
     * @example
     * await flashStore.delete(1)
     */
    delete(key: K): Promise<void>;
    /**
     * @typedef IteratorOptions
     *
     * @property { any }      gt       - Matches values that are greater than a specified value
     * @property { any }      gte      - Matches values that are greater than or equal to a specified value.
     * @property { any }      lt       - Matches values that are less than a specified value.
     * @property { any }      lte      - Matches values that are less than or equal to a specified value.
     * @property { boolean }  reverse  - Reverse the result set
     * @property { number }   limit    - Limits the number in the result set.
     * @property { any }      prefix   - Make the same prefix key get together.
     */
    /**
     * Find keys by IteratorOptions
     *
     * @param {IteratorOptions} [options={}]
     * @returns {AsyncIterableIterator<K>}
     * @example
     * const flashStore = new FlashStore('flashstore.workdir')
     * for await(const key of flashStore.keys({gte: 1})) {
     *   console.log(key)
     * }
     */
    keys(options?: IteratorOptions): AsyncIterableIterator<K>;
    /**
     * Find all values
     *
     * @returns {AsyncIterableIterator<V>}
     * @example
     * const flashStore = new FlashStore('flashstore.workdir')
     * for await(const value of flashStore.values()) {
     *   console.log(value)
     * }
     */
    values(options?: IteratorOptions): AsyncIterableIterator<V>;
    /**
     * Get the size of the database
     * @returns {Promise<number>}
     * @example
     * const size = await flashStore.size
     * console.log(`database size: ${size}`)
     */
    get size(): Promise<number>;
    /**
     * FIXME: use better way to do this
     */
    has(key: K): Promise<boolean>;
    /**
     * TODO: use better way to do this with leveldb
     */
    clear(): Promise<void>;
    /**
     * @private
     */
    entries(options?: IteratorOptions): AsyncIterableIterator<[K, V]>;
    [Symbol.asyncIterator](): AsyncIterableIterator<[K, V]>;
    /**
     * FlashStore will not be able to be used anymore after it has been closed.
     */
    close(): Promise<void>;
    /**
     * Destroy the database
     *
     * @returns {Promise<void>}
     */
    destroy(): Promise<void>;
}
export default FlashStore;
//# sourceMappingURL=flash-store.d.ts.map