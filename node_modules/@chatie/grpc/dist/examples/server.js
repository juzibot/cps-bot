"use strict";
/* eslint-disable sort-keys */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_1 = __importDefault(require("grpc"));
const index_1 = require("../src/index");
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
const puppet_server_impl_1 = require("../tests/puppet-server-impl");
/**
 * Implements the SayHello RPC method.
 */
const puppetServerExample = Object.assign(Object.assign({}, puppet_server_impl_1.puppetServerImpl), { event: (streamnigCall) => {
        const eventResponse = new index_1.EventResponse();
        eventResponse.setType(index_1.EventType.EVENT_TYPE_DONG);
        let n = 42;
        const timer = setInterval(() => {
            eventResponse.setPayload(JSON.stringify({ n: n++ }));
            streamnigCall.write(eventResponse);
        }, 1000);
        setTimeout(() => {
            clearInterval(timer);
            eventResponse.setPayload(JSON.stringify({ n: n++ }));
            streamnigCall.write(eventResponse);
            setImmediate(() => streamnigCall.end());
        }, 2 * 1000 + 500);
    }, contactList: (call, callback) => {
        void call;
        const contactListResponse = new index_1.ContactListResponse();
        const idList = ['a', 'b', 'c'];
        contactListResponse.setIdsList(idList);
        callback(null, contactListResponse);
    }, contactAlias: (call, callback) => {
        const id = call.request.getId();
        const alias = call.request.getAlias();
        console.info('id:', id);
        console.info('alias:', alias);
        const response = new index_1.ContactAliasResponse();
        if (alias) {
            callback(null, response);
            return;
        }
        const aliasWrapper = new wrappers_pb_1.StringValue();
        aliasWrapper.setValue('my alias');
        response.setAlias(aliasWrapper);
        callback(null, response);
    } });
/**
 * Starts an RPC server that receives requests for the Greeter service at the
 * sample server port
 */
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const server = new grpc_1.default.Server();
        server.addService(index_1.PuppetService, puppetServerExample);
        server.bind('127.0.0.1:8788', grpc_1.default.ServerCredentials.createInsecure());
        server.start();
        return 0;
    });
}
main()
    // .then(process.exit)
    .catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=server.js.map